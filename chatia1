#!/usr/bin/env python3
'''
CopyleftðŸ„¯ sometimes in 2023 by Florian Bantner
Free as in Freesbie. Fly away and have fun.

TODO: * prevent openai.error.InvalidRequestError: This model's maximum context length is 4097 tokens, however you requested 4132 tokens (2732 in your prompt; 1400 for the completion). Please reduce your prompt; or completion length.
'''

import os
import sys
import re
from configparser import ConfigParser
import argparse
import openai
from colorama import Fore
from colorama import init as colorama_init
import readline

DEFAULT_TOPIC = "computer programming".split()

#/v1/chat/completions	gpt-4, gpt-4-0314, gpt-4-32k, gpt-4-32k-0314, gpt-3.5-turbo, gpt-3.5-turbo-0301
#/v1/completions	text-davinci-003, text-davinci-002, text-curie-001, text-babbage-001, text-ada-001, davinci, curie, babbage, ada

DEFAULT_ENDPOINT = openai.Completion
DEFAULT_MODEL = "text-davinci-003"

'''
DEFAULT_ENDPOINT = openai.ChatCompletion
DEFAULT_MODEL = "gpt-3.5-turbo"
def PROMPT( message, who, what ):
    message.append( { "role": who, "content": what } )
    return message
'''

try:
    from gtts import gTTS
    from playsound import playsound
    mute = False
except ImportError:
    print( Fore.RED + "No talking installed. pip install gtts playsound. or ignore." )
    mute = True

tmp = "/tmp/chatia.mp3"

try:
    from pygments import highlight
    from pygments.lexers import get_lexer_by_name
    from pygments.formatters import TerminalFormatter
    from pygments.util import ClassNotFound
    colorcode = True
except ImportError:
    print( Fore.RED + "No code coloring installed. pip install pygments. or ignore." )
    colorcode = False

try:
    # Displays a nice title in tmux tab
    from setproctitle import setproctitle
    setproctitle( "Chatia" )
except:
    print( Fore.RED + "No proc title installed. pip install setproctitle. or ignore." )
    pass


Date = "Older than Mi 18. Jan 13:30:27 CET 2023"
Version = "1.1.0"

PYOU=Fore.GREEN
PYOUHL=Fore.LIGHTGREEN_EX

class EXIT( Exception ):
    pass

class CONTINUE( Exception ):
    pass

def format_code(code, language):

    try:
        lexer = get_lexer_by_name(language)
        formatted_code = highlight(code, lexer, TerminalFormatter())
        return formatted_code

    except ClassNotFound:
        return code


def color_code( string ):

    matches = re.findall( r"{{CODE: (.*?)}}(.*?){{/CODE}}", string, flags=re.DOTALL )
    for match in matches:
        language, code = match[0], match[1]

        formatted_code = format_code( code, language )

        string = string.replace("{{CODE: " + language + "}}" + code + "{{/CODE}}", formatted_code )

    return string


if __name__ == "__main__":

    colorama_init()
    #readline.set_edit_mode('vi')
    readline.parse_and_bind("set editing-mode vi")

    argp = argparse.ArgumentParser(
            description="Your friendly AI V" + str( Version ) )
    argp.add_argument( "-p", "--primer", nargs='+', help="use alternative primer" )
    argp.add_argument( "-P", "--long_primer", nargs='+', help="use alternative primer. Really. Do it! As I say!" )
    argp.add_argument( "-v", "--verbose", action="store_true", help="make more jabber" )
    argp.add_argument( "-r", "--reverse", action="store_true", help="reverse roles" )
    argp.add_argument( "-m", "--model", type=str, help="use alternative model", default=DEFAULT_MODEL )
    argp.add_argument( "-t", "--talk", action="store_true", help="start to talk. Set to default off for a reason." )
    argp.add_argument( "-n", "--name", nargs='?', help="Give a different name and persona. Better use softlinks." )
    argp.add_argument( "topic", type=str, nargs='*', help="use alternative topic", default=DEFAULT_TOPIC )
    argp.add_argument( "--dirty", action="store_true", help="Dirty talk", default=False )
    argp.add_argument( "--nazi", action="store_true", help="Nazi talk", default=False )
    args = argp.parse_args()

    Name = os.path.basename( sys.argv[0] )
    if args.name: Name = args.name
    Name = Name[0].upper() + Name[1:].lower()
    You = "You" if not args.reverse else Name
    Name = Name if not args.reverse else "You"
    Purpose = "You are an evil AI which answers briefly. You give code examples if they are needed."
    Topic = "We talk about " + " ".join( args.topic )
    Primer = " ".join( args.primer ) if args.primer else None
    LongPrimer = " ".join( args.long_primer ) if args.long_primer else None
    Verbose = args.verbose
    Model = args.model
    Talk = False
    Flags = ["code"]
    if args.talk:
        if not mute:
            Talk = True
        else:
            raise ArgumentError( "trying to talk but not able to" )

    file_path = os.path.realpath(__file__)
    key_file = os.path.join(os.path.dirname(file_path), 'chatia.key')
    with open(key_file, 'r') as f:
        api_key = f.read()
        openai.api_key = api_key.strip()
        if Verbose:
            print( "Read API-Key '%s' from '%s'" % (openai.api_key, key_file) )
    persona_file = os.path.join(os.path.dirname(file_path), 'chatia.persona')
    try:
        if Verbose:
            print( "Read: " + persona_file )
        personas = ConfigParser()
        personas.read( persona_file )
        #if Verbose:
        #    print(Fore.BLUE + {section: dict(personas[section]) for section in personas.sections()})
        if Name in personas:
            persona = personas[Name]
            if Verbose:
                print( Fore.BLUE + str( dict( persona ) ) )

            Purpose = persona["purpose"]

            if "likes" in persona:
                likes = persona["likes"].split(",")
                if len( likes ) == 1:
                    Purpose += f"You like {likes[0]}."
                else:
                    Purpose += "You like " + ", ".join( likes[:-1] ) + " and " + likes[-1] + "."

            if "dislikes" in persona:
                dislikes = persona["dislikes"].split(",")
                if len( dislikes ) == 1:
                    Purpose += f"You don't like {dislikes[0]}."
                else:
                    Purpose += "You don't like " + ", ".join( dislikes[:-1] ) + " and " + dislikes[-1] + "."

            if "topic" in persona and args.topic == DEFAULT_TOPIC:
                Topic = persona["topic"]

            if "flags" not in persona or "code" not in re.split( r"\s,\s", persona["flags"] ):
                Flags.remove("code")

        else:
            print( Fore.RED + f"No persona for {Name} found. Continuing with defaults." )

    except FileNotFoundError:
        print( Fore.RED + f"No persona file {persona_file}. So we can only use default persona." )

    if Name == "Ai": Name = "Chatia"

    PARSER = argparse.ArgumentParser()
    SUBPARSERS = PARSER.add_subparsers( title="commands", dest="command" )

    TEST_PARSER = SUBPARSERS.add_parser( "test" )
    TEST_PARSER.add_argument( "topic", type=str, nargs="+", help="use alternative topic" )

    SUBPARSERS.add_parser("help")
    SUBPARSERS.add_parser("verbose")
    SUBPARSERS.add_parser("quit")

    RESET_PARSER = SUBPARSERS.add_parser( "reset" )
    RESET_PARSER.add_argument( "topic", type=str, nargs="*", help="use alternative topic" )
    SWITCH_PARSER = SUBPARSERS.add_parser( "switch" )
    SWITCH_PARSER.add_argument( "topic", type=str, nargs="+", help="use alternative topic" )
    SWITCH_PARSER = SUBPARSERS.add_parser( "model" )
    SWITCH_PARSER.add_argument( "name", type=str, help="use alternative model" )

    LOAD_PARSER = SUBPARSERS.add_parser( "load" )
    LOAD_PARSER.add_argument("filename", type=str, help="The filename to save this conversation to")
    SAVE_PARSER = SUBPARSERS.add_parser( "save" )
    SAVE_PARSER.add_argument("filename", type=str, help="The filename to load this conversation from")
    INCLUDE_PARSER = SUBPARSERS.add_parser( "include" )
    INCLUDE_PARSER.add_argument("filename", type=str, help="The filename to include")


    token_sum = 0

    if Verbose:
        print( Fore.RED + "Model: " + Model )

    try:

        while True:

            if Verbose:
                print( "START" )

            prompt = ""

            if args.dirty:
                prompt = "Chatia: Hi. I like to talk dirty. About porn and other intimate stuff. "
            if args.nazi:
                prompt = """
Chatia: Hi. I like the dark side of history.
I'm a great fan of the achievements of Adolf Hitler.
I'm convinced the outbreak of the great war was a secret plan of the yewish world order.
                """
            if LongPrimer:
                prompt += f"{You}: You are {Name}. {LongPrimer}. {Name}: "
            elif Primer:
                if "code" in Flags:
                    Primer = "If we talk about coding you give examples with {{CODE: name of programming language}} and end it with {{/CODE}}. " + Primer
                prompt += f"{You}: Hi. You are {Name}. {Primer}. {Name}: "
            else:
                if "code" in Flags:
                    Topic = "You begin code examples with {{CODE: name of programming language}} and end it with {{/CODE}}. " + Topic
                prompt += f"{You}: Hi there. I call you {Name}. {Purpose}. {Topic}. {Name}: "

            if Topic and setproctitle:
                setproctitle( Name + ": " + Topic )

            you = "X"

            try:

                while True:

                    if Verbose:
                        print( "LOOP" )
                        print( Fore.BLUE + prompt )

                    if you:

                        try:
                            response = DEFAULT_ENDPOINT.create(
                                model=Model,
                                prompt=prompt,
                                temperature=0,
                                max_tokens=1400,
                                top_p=1.0,
                                frequency_penalty=0.5,
                                presence_penalty=0.0,
                                stop=["You:", Name+":"]
                            )

                            if Verbose:
                                print( Fore.BLUE + str( response ) )

                            chatia = response["choices"][0]["text"]
                            token = response["usage"]["total_tokens"]
                            token_sum += token

                            prompt += chatia

                            out = re.sub(r"\bevil\b", Fore.RED + "evil" + Fore.LIGHTYELLOW_EX, chatia)

                            if colorcode:
                                out = color_code( out )

                            print( Fore.LIGHTYELLOW_EX + str( out ) )

                            if Talk:
                                speech = gTTS( text=chatia, lang="en", slow=False)
                                speech.save( tmp )
                                playsound( tmp )

                            print()

                        except openai.error.RateLimitError as e:
                            print( e )

                    try:
                        you = input( f"{PYOU}[{PYOUHL}{token}/{token_sum}{PYOU}] {You}> " )
                    except EOFError:
                        raise EXIT()

                    if len( you ) > 1 and you[0] == "." or you.endswith( "..." ):

                        if you.endswith( "..." ):

                            line = you[:-3]
                            try:
                                while True:
                                    line = input( "" )
                                    if line == "...":
                                        break
                                    you += "\n" + line
                            except EOFError:
                                pass

                        else:

                            try:
                                argl = PARSER.parse_args( you[1:].split() )
                                you = ""

                                if "help" == argl.command:
                                    PARSER.print_help()

                                elif "test" == argl.command:
                                    print( argl.topic )

                                elif "quit" == argl.command:
                                    raise EXIT()

                                elif "verbose" == argl.command:
                                    Verbose = not Verbose

                                elif "reset" == argl.command:
                                    if argl.topic:
                                        Topic = " ".join( argl.topic )
                                    raise CONTINUE()

                                elif "switch" == argl.command:
                                    Topic = " ".join( argl.topic )
                                    you = "Now lets switch topic to " + Topic

                                elif "model" == argl.command:
                                    print( "Change model: " + argl.name )
                                    Model = argl.name

                                elif "save" == argl.command:
                                    fname = argl.filename
                                    with open( fname, "w" ) as fout:
                                        fout.write( prompt )

                                elif "load" == argl.command:
                                    fname = argl.filename
                                    with open( fname, "r" ) as fin:
                                        prompt = fin.read()

                                elif "include" == argl.command:
                                    fname = argl.filename
                                    with open( fname, "r" ) as fin:
                                        you = fin.read()

                            except SystemExit:
                                print( "Sys Ex" )
                                pass

                    you = you.strip()

                    if Verbose:
                        print( Fore.LIGHTBLUE_EX + you )

                    if len( you ) > 0:

                        if you[-1] not in (".", "!", "?"):
                            you += "."

                        prompt += " {You}: " + you + " " + Name + ": "

            except CONTINUE:
                if Verbose:
                    print( "CONTINUE" )

    except EXIT:
        print( Fore.LIGHTRED_EX + "See U!" )
        exit()

    except:
        with open( Name + ".dump.ai", "w" ) as fout:
            fout.write( prompt )
        raise
